/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Prog2.jj */
/*@egen*/options {
           
STATIC=false;
}

PARSER_BEGIN(Prog2)
import java.util.Scanner;
class Prog2/*@bgen(jjtree)*/implements Prog2TreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTProg2State jjtree = new JJTProg2State();

/*@egen*/
  public static void main(String[] args) throws ParseException, CloneNotSupportedException {
System.out.println(">>> Lambda Expression Evaluator <<<");

//****************************generate the AST for any applied Lambda expression**********************//

System.out.println("Enter an applied Lambda expression:");    
Prog2 parser = new Prog2(System.in);
    ASTStart start = parser.Start();
System.out.println();
System.out.println("The abstract syntax tree:");
    start.dumpAST("");
System.out.println();

//*****************************call method for concreate syntax print*********************************//

System.out.println("The Lambda expression in the concrete syntax:");
start.astToString();
System.out.println();

//*****************************Free Variables*********************************************************//

System.out.println();
System.out.println("The abstract syntax tree with free variables: \n");
start.dumpFV("", null);
System.out.println();

//*****************************Substitution**********************************************************//

System.out.println("Enter an applied Lambda expression:");
Prog2 parser2 = new Prog2(System.in);
ASTStart start2 = parser2.Start();
System.out.println();
System.out.println("The abstract syntax tree:");
start2.dumpAST("");
System.out.println();

System.out.println("Enter the variable to be substituted:");
Scanner sc = new Scanner(System.in);
String var=sc.next();
System.out.println();
System.out.println("Enter the substituting applied Lambda expression:");
Prog2 parser3 = new Prog2(System.in);
    ASTStart start3 = parser3.Start();
System.out.println();

System.out.println("The abstract syntax tree:");
    start3.dumpAST("");
System.out.println();

System.out.println("The substitution result:");
SimpleNode resultSub = start2.substitute(var, start3);
resultSub.dumpAST(" ");

//*******************************Normal Order Evaluation***************************************************//

System.out.println();
System.out.println("Enter an applied Lambda expression:");
Prog2 parser4 = new Prog2(System.in);
ASTStart start4 = parser4.Start();

System.out.println();
System.out.println("The normal order evaluation result:");
SimpleNode result = start4.jjtGetChild(0).normalOrderEvaluate();
result.dumpAST("");

  }
}

PARSER_END(Prog2)

SKIP : {
  " " | "\t" | "\n" | "\r"
}

TOKEN : /* IDENTIFIERS */
{
     <L: "L">
|    <IDENTIFIER: <LETTER> (<LETTER>|<INTEGER>)* >
|  < #LETTER: ["a"-"z","A"-"K","M"-"Z"] >
| <INTEGER: (["0"-"9"])+ >

}

ASTStart Start():
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expression()      :{}{/*@bgen(jjtree) add */
{
  ASTadd jjtn001 = new ASTadd(JJTADD);
  boolean jjtc001 = true;
  jjtree.openNodeScope(jjtn001);
}
try {
/*@egen*/
"+"/*@bgen(jjtree)*/
} finally {
  if (jjtc001) {
    jjtree.closeNodeScope(jjtn001, true);
  }
}
/*@egen*/      |/*@bgen(jjtree) sub */
          {
            ASTsub jjtn002 = new ASTsub(JJTSUB);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/"-"/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/      |/*@bgen(jjtree) mul */
                    {
                      ASTmul jjtn003 = new ASTmul(JJTMUL);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
                    }
                    try {
/*@egen*/"*"/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, true);
                      }
                    }
/*@egen*/      |/*@bgen(jjtree) div */
                              {
                                ASTdiv jjtn004 = new ASTdiv(JJTDIV);
                                boolean jjtc004 = true;
                                jjtree.openNodeScope(jjtn004);
                              }
                              try {
/*@egen*/"/"/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc004) {
                                  jjtree.closeNodeScope(jjtn004, true);
                                }
                              }
/*@egen*/      |/*@bgen(jjtree) mod */
                                        {
                                          ASTmod jjtn005 = new ASTmod(JJTMOD);
                                          boolean jjtc005 = true;
                                          jjtree.openNodeScope(jjtn005);
                                        }
                                        try {
/*@egen*/"%"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc005) {
                                            jjtree.closeNodeScope(jjtn005, true);
                                          }
                                        }
/*@egen*/      | ID() | Int()
| "(" (Application() | Abstraction()) ")" 
}

void Application()       : {}{
Expression() (/*@bgen(jjtree) #appl( 2) */
              {
                ASTappl jjtn001 = new ASTappl(JJTAPPL);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/Expression()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/          )*
}

void Abstraction()       :{}{
"L" ID()/*@bgen(jjtree) #lamb( 2) */
         {
           ASTlamb jjtn001 = new ASTlamb(JJTLAMB);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/ body()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
         }
/*@egen*/         
}
void Int():{/*@bgen(jjtree) Int */
            ASTInt jjtn000 = new ASTInt(JJTINT);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Int */
   try {
/*@egen*/
   t=<INTEGER>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{

jjtn000.setName(t.image);
}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void body()       :{}{
"." Application() | ID()/*@bgen(jjtree) #lamb( 2) */
                         {
                           ASTlamb jjtn001 = new ASTlamb(JJTLAMB);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*/ body()/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
                         }
/*@egen*/         
}

void ID():{/*@bgen(jjtree) ID */
           ASTID jjtn000 = new ASTID(JJTID);
           boolean jjtc000 = true;
           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ID */
   try {
/*@egen*/
   t=<IDENTIFIER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{

jjtn000.setName(t.image);
}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Add() : {/*@bgen(jjtree) Add */
  ASTAdd jjtn000 = new ASTAdd(JJTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Add */
  try {
/*@egen*/
  "+"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Sub() : {/*@bgen(jjtree) Sub */
  ASTSub jjtn000 = new ASTSub(JJTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Sub */
  try {
/*@egen*/
  "-"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Mul() : {/*@bgen(jjtree) Mul */
  ASTMul jjtn000 = new ASTMul(JJTMUL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Mul */
  try {
/*@egen*/
  "*"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Div() : {/*@bgen(jjtree) Div */
  ASTDiv jjtn000 = new ASTDiv(JJTDIV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Div */
 try {
/*@egen*/
 "/"/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

void Mod() : {/*@bgen(jjtree) Mod */
  ASTMod jjtn000 = new ASTMod(JJTMOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Mod */
  try {
/*@egen*/
  "%"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}