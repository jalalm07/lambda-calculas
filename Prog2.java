/* Prog2.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Prog2.java */
import java.util.Scanner;
class Prog2/*@bgen(jjtree)*/implements Prog2TreeConstants, Prog2Constants {/*@bgen(jjtree)*/
  protected JJTProg2State jjtree = new JJTProg2State();public static void main(String[] args) throws ParseException, CloneNotSupportedException {
System.out.println(">>> Lambda Expression Evaluator <<<");

//****************************generate the AST for any applied Lambda expression**********************//

System.out.println("Enter an applied Lambda expression:");
Prog2 parser = new Prog2(System.in);
    ASTStart start = parser.Start();
System.out.println();
System.out.println("The abstract syntax tree:");
    start.dumpAST("");
System.out.println();

//*****************************call method for concreate syntax print*********************************//

System.out.println("The Lambda expression in the concrete syntax:");
start.astToString();
System.out.println();

//*****************************Free Variables*********************************************************//

System.out.println();
System.out.println("The abstract syntax tree with free variables: \n");
start.dumpFV("", null);
System.out.println();

//*****************************Substitution**********************************************************//

System.out.println("Enter an applied Lambda expression:");
Prog2 parser2 = new Prog2(System.in);
ASTStart start2 = parser2.Start();
System.out.println();
System.out.println("The abstract syntax tree:");
start2.dumpAST("");
System.out.println();

System.out.println("Enter the variable to be substituted:");
Scanner sc = new Scanner(System.in);
String var=sc.next();
System.out.println();
System.out.println("Enter the substituting applied Lambda expression:");
Prog2 parser3 = new Prog2(System.in);
    ASTStart start3 = parser3.Start();
System.out.println();

System.out.println("The abstract syntax tree:");
    start3.dumpAST("");
System.out.println();

System.out.println("The substitution result:");
SimpleNode resultSub = start2.substitute(var, start3);
resultSub.dumpAST(" ");

//*******************************Normal Order Evaluation***************************************************//

System.out.println();
System.out.println("Enter an applied Lambda expression:");
Prog2 parser4 = new Prog2(System.in);
ASTStart start4 = parser4.Start();

System.out.println();
System.out.println("The normal order evaluation result:");
SimpleNode result = start4.jjtGetChild(0).normalOrderEvaluate();
result.dumpAST("");

  }

  final public ASTStart Start() throws ParseException {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 9:{
ASTadd jjtn001 = new ASTadd(JJTADD);
  boolean jjtc001 = true;
  jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(9);
      } finally {
if (jjtc001) {
    jjtree.closeNodeScope(jjtn001, true);
  }
      }
      break;
      }
    case 10:{
ASTsub jjtn002 = new ASTsub(JJTSUB);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(10);
      } finally {
if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
      }
      break;
      }
    case 11:{
ASTmul jjtn003 = new ASTmul(JJTMUL);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(11);
      } finally {
if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, true);
                      }
      }
      break;
      }
    case 12:{
ASTdiv jjtn004 = new ASTdiv(JJTDIV);
                                boolean jjtc004 = true;
                                jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(12);
      } finally {
if (jjtc004) {
                                  jjtree.closeNodeScope(jjtn004, true);
                                }
      }
      break;
      }
    case 13:{
ASTmod jjtn005 = new ASTmod(JJTMOD);
                                          boolean jjtc005 = true;
                                          jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(13);
      } finally {
if (jjtc005) {
                                            jjtree.closeNodeScope(jjtn005, true);
                                          }
      }
      break;
      }
    case IDENTIFIER:{
      ID();
      break;
      }
    case INTEGER:{
      Int();
      break;
      }
    case 14:{
      jj_consume_token(14);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:
      case INTEGER:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:{
        Application();
        break;
        }
      case L:{
        Abstraction();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(15);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Application() throws ParseException {
    Expression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:
      case INTEGER:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
ASTappl jjtn001 = new ASTappl(JJTAPPL);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
      }
    }
}

  final public void Abstraction() throws ParseException {
    jj_consume_token(L);
    ID();
ASTlamb jjtn001 = new ASTlamb(JJTLAMB);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
    try {
      body();
    } catch (Throwable jjte001) {
if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
    }
}

  final public void Int() throws ParseException {/*@bgen(jjtree) Int */
            ASTInt jjtn000 = new ASTInt(JJTINT);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void body() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 16:{
      jj_consume_token(16);
      Application();
      break;
      }
    case IDENTIFIER:{
      ID();
ASTlamb jjtn001 = new ASTlamb(JJTLAMB);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
      try {
        body();
      } catch (Throwable jjte001) {
if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte001;}
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
      }
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void ID() throws ParseException {/*@bgen(jjtree) ID */
           ASTID jjtn000 = new ASTID(JJTID);
           boolean jjtc000 = true;
           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void Add() throws ParseException {/*@bgen(jjtree) Add */
  ASTAdd jjtn000 = new ASTAdd(JJTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(9);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void Sub() throws ParseException {/*@bgen(jjtree) Sub */
  ASTSub jjtn000 = new ASTSub(JJTSUB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(10);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void Mul() throws ParseException {/*@bgen(jjtree) Mul */
  ASTMul jjtn000 = new ASTMul(JJTMUL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(11);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void Div() throws ParseException {/*@bgen(jjtree) Div */
  ASTDiv jjtn000 = new ASTDiv(JJTDIV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(12);
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

  final public void Mod() throws ParseException {/*@bgen(jjtree) Mod */
  ASTMod jjtn000 = new ASTMod(JJTMOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(13);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  /** Generated Token Manager. */
  public Prog2TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x7f60,0x7f40,0x7f40,0x10040,};
	}

  /** Constructor with InputStream. */
  public Prog2(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Prog2(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new Prog2TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Prog2(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new Prog2TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new Prog2TokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Prog2(Prog2TokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Prog2TokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[17];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 4; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 17; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
